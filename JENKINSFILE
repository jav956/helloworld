pipeline {
    agent any
     stages {
        stage('Build') {
            steps {
                // Añadir etapa “Build” (que no hace nada realmente)
                echo "Nada que compilar"
            }
        }
        stage('Test') {
            // Convertir ambas etapas para se ejecuten en paralelo
            parallel {
                // Añadir etapa Unit lanzando solo las pruebas unitarias
                stage('Unit') {
                    steps {
                        bat '''
                            call C:\\Users\\jvareldi\\Desktop\\unir\\venv\\Scripts\\activate.bat
                            @echo on
                            set PYTHONPATH=%WORKSPACE%
                            pytest --junitxml=result-unit.xml test\\unit
                        '''
                    }
                }
                // Añadir etapa Service (secuencial) lanzado las pruebas de servicio
                stage('Service') {
                    steps {
                        bat '''
                            call C:\\Users\\jvareldi\\Desktop\\unir\\venv\\Scripts\\activate.bat
                            @echo on
                            
                            REM Iniciar los servidores flask y wiremock antes de llamar a pytest test rest
                            set FLASK_APP=app\\api.py
                            set FLASK_ENV=development
                            start flask run
                            start java -jar C:\\Users\\jvareldi\\Desktop\\unir\\wiremock-standalone-3.3.1.jar --port 9090 --root-dir C:\\Users\\jvareldi\\Desktop\\unir\\helloworld-master\\test\\wiremock
                            set PYTHONPATH=%WORKSPACE%
                            pytest --junitxml=result-service.xml test\\rest
                        '''            
                    }
                }
            }
        }
        // Añadir una etapa posterior para conectar con JUnit
        stage('JUnit') {
            steps {
                junit 'result-*.xml' 
            }
        }
    }
}